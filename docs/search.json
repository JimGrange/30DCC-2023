[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "30 Day Coding Challenge (2023)",
    "section": "",
    "text": "Introduction"
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "\n1  Introduction\n",
    "section": "",
    "text": "This is a book created from markdown and executable code.\nSee Knuth (1984) for additional discussion of literate programming.\n\nCode1 + 1\n## [1] 2\n\n\n\n\n\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput. J. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "\n2  Summary\n",
    "section": "",
    "text": "In summary, this book has no content whatsoever.\n\nTest Chunk1 + 1\n\n[1] 2"
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Knuth, Donald E. 1984. “Literate Programming.” Comput.\nJ. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  },
  {
    "objectID": "chapters/part-to-whole.html",
    "href": "chapters/part-to-whole.html",
    "title": "\n1  Part-to-whole\n",
    "section": "",
    "text": "library(tidyverse)\n\n\nCodedata &lt;- tibble(\n  x = rnorm(1000), \n  y = rnorm(1000)\n)\ndata\n\n# A tibble: 1,000 × 2\n        x      y\n    &lt;dbl&gt;  &lt;dbl&gt;\n 1 -0.548 -0.911\n 2 -1.01  -0.336\n 3 -0.732 -0.936\n 4 -0.356  0.408\n 5 -2.27  -0.857\n 6  0.406  1.48 \n 7 -0.294 -0.952\n 8 -1.68   1.54 \n 9 -1.64   0.375\n10 -1.45   0.997\n# … with 990 more rows"
  },
  {
    "objectID": "chapters/01-part-to-whole.html",
    "href": "chapters/01-part-to-whole.html",
    "title": "\n1  Part-to-whole\n",
    "section": "",
    "text": "I will be honest, I didn’t know what was meant by a “part-to-whole” data visualisation, so I did what all the cool kids are doing these days and I asked Chat-GPT:\n\n\nlibrary(tidyverse)\n\n\nCodedata &lt;- tibble(\n  x = rnorm(1000), \n  y = rnorm(1000)\n)\ndata\n\n# A tibble: 1,000 × 2\n         x       y\n     &lt;dbl&gt;   &lt;dbl&gt;\n 1 -0.384   0.193 \n 2 -0.415  -0.0172\n 3 -1.46   -0.0567\n 4 -0.285  -0.506 \n 5 -0.0270 -0.227 \n 6  0.617   0.487 \n 7  0.0875  0.957 \n 8  0.340   0.427 \n 9  2.28   -0.757 \n10  1.14    1.32  \n# … with 990 more rows"
  },
  {
    "objectID": "chapters/01-part-to-whole.html#ultrarunning-eating",
    "href": "chapters/01-part-to-whole.html#ultrarunning-eating",
    "title": "\n1  Part-to-whole\n",
    "section": "\n1.1 Ultrarunning & Eating",
    "text": "1.1 Ultrarunning & Eating\nSince the UK lockdown in March 2020 I’ve caught the running bug. Last year, I completed my first marathon, and I have signed up to two marathons this year. The marathon is—obviously—a tough distance; but some (crazy) people run Ultra-marathons which is any race longer than the 26.2 miles of a standard marathon.\nIf you’re training for an ultra-marathon, you probably want to make sure your diet during your training is good to ensure you are getting the necessary nutrients and energy. It’s not untypical for ultra-runners to consume anywhere between 3,000 to 6,000 calories a day during training. As for macro-nutrient recommendations, the guidelines for ultra-runners are not very different from those for other endurance athletes. The general recommendation for endurance athletes is as follows:\n\n\nCarbohydrates: 45-65% of total daily calories.\n\nProtein: 15-20% of total daily calories.\n\nFats: 20-35% of total daily calories.\n\nLet’s say you’re interested in making a daily log of your total daily calorie intake together with tracking your macro-nutrients. For each day, how did each of the macro-nutrients (i.e., the part) contribute to total calorie intake (i.e., the whole)?"
  },
  {
    "objectID": "chapters/01-part-to-whole.html#simulating-the-data",
    "href": "chapters/01-part-to-whole.html#simulating-the-data",
    "title": "\n1  Part-to-whole\n",
    "section": "\n1.2 Simulating the data",
    "text": "1.2 Simulating the data\nFirst let’s load the required packages and do a general set-up:\n\nlibrary(tidyverse)\n\ntheme_set(theme_bw())\n\nLet’s simulate data for the month of April 2023. For each day, we log/generate the following data:\n\ndate: Date of the daily log\nday: What was the day of the week? We might be interested how\nweek: In order to differentiate Tuesday from week 1 from Tuesday from week 2\ncalories_total: Simulate total daily calorie intake. For this we assume a normal distribution with mean of 3,000 calories and a standard deviation of 250.\nprop_carbs: For each day, what is the proportion of total calories made up from carbohydrates. As this is a proportion, for each day we generate a random number between 0.45 and 0.65.\nprop_protein: For each day, what is the proportion of total calories made up from protein? For each day we generate a random number between 0.15 and 0.20.\nprop_fat: For each day, what is the proportion of total calories made up from fat? As the proportions for each macro-nutrient need to sum to 1, fat is just 1 minus prop_carbs and prop_protein.\n\n\n# simulate the data\nset.seed(123)\n\ndata &lt;- tibble(\n  date = lubridate::ymd(paste(\"2023-04-\", 1:30, sep = \"\")), \n  day = lubridate::wday(date, label = TRUE), \n  week = lubridate::week(date),\n  calories_total = rnorm(n = 30, mean = 3000, sd = 250), \n  prop_carbs = runif(n = 30, min = 0.45, max = 0.65), \n  prop_protein = runif(n = 30, min = 0.15, max = 0.20), \n  prop_fat = 1 - (prop_carbs + prop_protein)\n  )\ndata\n\n# A tibble: 30 × 7\n   date       day    week calories_total prop_carbs prop_protein prop_fat\n   &lt;date&gt;     &lt;ord&gt; &lt;dbl&gt;          &lt;dbl&gt;      &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1 2023-04-01 Sat      13          2860.      0.583        0.157    0.260\n 2 2023-04-02 Sun      14          2942.      0.469        0.183    0.348\n 3 2023-04-03 Mon      14          3390.      0.527        0.167    0.306\n 4 2023-04-04 Tue      14          3018.      0.505        0.183    0.312\n 5 2023-04-05 Wed      14          3032.      0.613        0.166    0.221\n 6 2023-04-06 Thu      14          3429.      0.540        0.159    0.301\n 7 2023-04-07 Fri      14          3115.      0.612        0.189    0.199\n 8 2023-04-08 Sat      14          2684.      0.612        0.155    0.233\n 9 2023-04-09 Sun      15          2828.      0.609        0.173    0.218\n10 2023-04-10 Mon      15          2889.      0.538        0.176    0.286\n# … with 20 more rows\n\n\nWe can then use these proportions for each macro to simulate how many of the day’s total calories were from carbohydrates, protein, and fats. Once we have this we can remove the proportion columns.\n\ndata &lt;- data %&gt;% \n  mutate(calories_carbs = calories_total * prop_carbs, \n         calories_protein = calories_total * prop_protein, \n         calories_fat = calories_total * prop_fat) %&gt;% \n  select(-starts_with(\"prop_\"))\ndata \n\n# A tibble: 30 × 7\n   date       day    week calories_total calories_carbs calories_protein calor…¹\n   &lt;date&gt;     &lt;ord&gt; &lt;dbl&gt;          &lt;dbl&gt;          &lt;dbl&gt;            &lt;dbl&gt;   &lt;dbl&gt;\n 1 2023-04-01 Sat      13          2860.          1667.             448.    745.\n 2 2023-04-02 Sun      14          2942.          1380.             537.   1025.\n 3 2023-04-03 Mon      14          3390.          1786.             567.   1037.\n 4 2023-04-04 Tue      14          3018.          1524.             552.    942.\n 5 2023-04-05 Wed      14          3032.          1859.             503.    670.\n 6 2023-04-06 Thu      14          3429.          1851.             546.   1032.\n 7 2023-04-07 Fri      14          3115.          1907.             589.    620.\n 8 2023-04-08 Sat      14          2684.          1644.             415.    625.\n 9 2023-04-09 Sun      15          2828.          1722.             490.    616.\n10 2023-04-10 Mon      15          2889.          1554.             507.    827.\n# … with 20 more rows, and abbreviated variable name ¹​calories_fat\n\n\nIn order for us to do visualisations we need to change the calorie data into long format.\n\ndata &lt;- data %&gt;% \n  pivot_longer(calories_total:calories_fat, \n               names_to = \"source\") %&gt;% \n  mutate(source = str_remove(source,\"calories_\"))\ndata\n\n# A tibble: 120 × 5\n   date       day    week source  value\n   &lt;date&gt;     &lt;ord&gt; &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;\n 1 2023-04-01 Sat      13 total   2860.\n 2 2023-04-01 Sat      13 carbs   1667.\n 3 2023-04-01 Sat      13 protein  448.\n 4 2023-04-01 Sat      13 fat      745.\n 5 2023-04-02 Sun      14 total   2942.\n 6 2023-04-02 Sun      14 carbs   1380.\n 7 2023-04-02 Sun      14 protein  537.\n 8 2023-04-02 Sun      14 fat     1025.\n 9 2023-04-03 Mon      14 total   3390.\n10 2023-04-03 Mon      14 carbs   1786.\n# … with 110 more rows"
  },
  {
    "objectID": "chapters/01-part-to-whole.html#visualisations",
    "href": "chapters/01-part-to-whole.html#visualisations",
    "title": "\n1  Part-to-whole\n",
    "section": "\n1.3 Visualisations",
    "text": "1.3 Visualisations"
  },
  {
    "objectID": "chapters/01-part-to-whole.html#different-visualisations",
    "href": "chapters/01-part-to-whole.html#different-visualisations",
    "title": "\n1  Part-to-whole\n",
    "section": "\n1.3 Different Visualisations",
    "text": "1.3 Different Visualisations\n\n1.3.1 Bar plot\nAhh the good old bar plot. Not really useful for a part-to-whole visualisation, but here it is anyway:\n\nbar &lt;- data %&gt;% \n  filter(source != \"total\") %&gt;% \n  ggplot(aes(x = date, y = value, group = source)) + \n  geom_col(aes(fill = source), \n           position = \"dodge\") + \n  labs(x = NULL, \n       y =\"Calories Consumed\", \n       fill = NULL)\nbar\n\n\n\n\n\n1.3.2 Stacked column plot\nA stacked column plot is similar to the bar plot but the bars are—you guessed it—stacked on top of each other:\n\nstacked_column &lt;- data %&gt;% \n  filter(source != \"total\") %&gt;% \n  ggplot(aes(x = date, y = value)) + \n  geom_col(aes(fill = source)) + \n  labs(x = NULL, \n       y =\"Calories Consumed\", \n       fill = NULL)\nstacked_column\n\n\n\n\n\n1.3.3 Polar plot\nI am not sure if this is the correct term for it, but you can wrap the column plot around polar coordinates using coord_polar() in ggplot. This makes it look snazzier, but I am not sure it is more informative.\n\npolar &lt;- data %&gt;% \n  filter(source != \"total\") %&gt;% \n  ggplot(aes(x = date, y = value)) + \n  geom_col(aes(fill = source)) + \n  coord_polar() +\n  labs(x = NULL, \n       y =\"Calories Consumed\", \n       fill = NULL)\npolar\n\n\n\n\nThis isn’t satisfactory because it’s hard to visualise the category (protein) with the smallest proportion. To address this we can reverse the ordering on the geom_col() call using the position argument:\n\npolar_reversed &lt;- data %&gt;% \n  filter(source != \"total\") %&gt;% \n  ggplot(aes(x = date, y = value)) + \n  geom_col(aes(fill = source), \n           position = position_stack(reverse = TRUE)) + \n  coord_polar() +\n  labs(x = NULL, \n       y =\"Calories Consumed\", \n       fill = NULL)\npolar_reversed\n\n\n\n\nHere they are all next to each other:\n\nlibrary(patchwork)\n(bar + stacked_column) / (polar + polar_reversed)"
  },
  {
    "objectID": "chapters/01-part-to-whole.html#grouping-by-day",
    "href": "chapters/01-part-to-whole.html#grouping-by-day",
    "title": "\n1  Part-to-whole\n",
    "section": "\n1.4 Grouping by day",
    "text": "1.4 Grouping by day\nMaybe you want to log how your macros vary on average by day. To do this, we group our data by the day of teh week and calculate averages for each day and plot these. We need to briefly go back to wide data to calculate the relevant averages\n\nday_data &lt;- data %&gt;% \n  pivot_wider(names_from = source, values_from = value) %&gt;% \n  group_by(day) %&gt;% \n  summarise(carbs = mean(carbs), \n            protein = mean(protein), \n            fat = mean(fat)) %&gt;% \n  pivot_longer(carbs:fat, names_to = \"source\")\nday_data\n\n# A tibble: 21 × 3\n   day   source  value\n   &lt;ord&gt; &lt;chr&gt;   &lt;dbl&gt;\n 1 Sun   carbs   1575.\n 2 Sun   protein  536.\n 3 Sun   fat      943.\n 4 Mon   carbs   1674.\n 5 Mon   protein  560.\n 6 Mon   fat      821.\n 7 Tue   carbs   1571.\n 8 Tue   protein  532.\n 9 Tue   fat      816.\n10 Wed   carbs   1669.\n# … with 11 more rows\n\n\n\nday_data %&gt;% \n  ggplot(aes(x = day, y = value)) + \n  geom_col(aes(fill = source), \n           position = position_stack(reverse = TRUE)) + \n  coord_polar() +\n  labs(x = NULL, \n       y =\"Calories Consumed\", \n       fill = NULL)"
  }
]