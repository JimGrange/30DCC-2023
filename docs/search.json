[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "30 Day Coding Challenge (2023)",
    "section": "",
    "text": "Introduction"
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "\n1  Introduction\n",
    "section": "",
    "text": "This is a book created from markdown and executable code.\nSee Knuth (1984) for additional discussion of literate programming.\n\nCode1 + 1\n## [1] 2\n\n\n\n\n\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput. J. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "\n2  Summary\n",
    "section": "",
    "text": "In summary, this book has no content whatsoever.\n\nTest Chunk1 + 1\n\n[1] 2"
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Knuth, Donald E. 1984. “Literate Programming.” Comput.\nJ. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  },
  {
    "objectID": "chapters/part-to-whole.html",
    "href": "chapters/part-to-whole.html",
    "title": "\n1  Part-to-whole\n",
    "section": "",
    "text": "library(tidyverse)\n\n\nCodedata &lt;- tibble(\n  x = rnorm(1000), \n  y = rnorm(1000)\n)\ndata\n\n# A tibble: 1,000 × 2\n        x      y\n    &lt;dbl&gt;  &lt;dbl&gt;\n 1 -0.548 -0.911\n 2 -1.01  -0.336\n 3 -0.732 -0.936\n 4 -0.356  0.408\n 5 -2.27  -0.857\n 6  0.406  1.48 \n 7 -0.294 -0.952\n 8 -1.68   1.54 \n 9 -1.64   0.375\n10 -1.45   0.997\n# … with 990 more rows"
  },
  {
    "objectID": "chapters/01-part-to-whole.html",
    "href": "chapters/01-part-to-whole.html",
    "title": "\n1  Part-to-whole\n",
    "section": "",
    "text": "I will be honest, I didn’t know what was meant by a “part-to-whole” data visualisation, so I did what all the cool kids are doing these days and I asked Chat-GPT:\n\n\nlibrary(tidyverse)\n\n\nCodedata &lt;- tibble(\n  x = rnorm(1000), \n  y = rnorm(1000)\n)\ndata\n\n# A tibble: 1,000 × 2\n         x       y\n     &lt;dbl&gt;   &lt;dbl&gt;\n 1 -0.384   0.193 \n 2 -0.415  -0.0172\n 3 -1.46   -0.0567\n 4 -0.285  -0.506 \n 5 -0.0270 -0.227 \n 6  0.617   0.487 \n 7  0.0875  0.957 \n 8  0.340   0.427 \n 9  2.28   -0.757 \n10  1.14    1.32  \n# … with 990 more rows"
  },
  {
    "objectID": "chapters/01-part-to-whole.html#ultrarunning-eating",
    "href": "chapters/01-part-to-whole.html#ultrarunning-eating",
    "title": "\n1  Part-to-whole\n",
    "section": "\n1.1 Ultrarunning & Eating",
    "text": "1.1 Ultrarunning & Eating\nSince the UK lockdown in March 2020 I’ve caught the running bug. Last year, I completed my first marathon, and I have signed up to two marathons this year. The marathon is—obviously—a tough distance; but some (crazy) people run Ultra-marathons which is any race longer than the 26.2 miles of a standard marathon.\nIf you’re training for an ultra-marathon, you probably want to make sure your diet during your training is good to ensure you are getting the necessary nutrients and energy. It’s not untypical for ultra-runners to consume anywhere between 3,000 to 6,000 calories a day during training. As for macro-nutrient recommendations, the guidelines for ultra-runners are not very different from those for other endurance athletes. The general recommendation for endurance athletes is as follows:\n\n\nCarbohydrates: 45-65% of total daily calories.\n\nProtein: 15-20% of total daily calories.\n\nFats: 20-35% of total daily calories.\n\nLet’s say you’re interested in making a daily log of your total daily calorie intake together with tracking your macro-nutrients. For each day, how did each of the macro-nutrients (i.e., the part) contribute to total calorie intake (i.e., the whole)?"
  },
  {
    "objectID": "chapters/01-part-to-whole.html#simulating-the-data",
    "href": "chapters/01-part-to-whole.html#simulating-the-data",
    "title": "\n1  Part-to-whole\n",
    "section": "\n1.2 Simulating the data",
    "text": "1.2 Simulating the data\nFirst let’s load the required packages and do a general set-up:\n\nlibrary(tidyverse)\nlibrary(lubridate)\n\ntheme_set(theme_bw())\n\nLet’s simulate data for the month of April 2023. For each day, we log/generate the following data:\n\n\ndate: Date of the daily log\n\nday: What was the day of the week? We might be interested how macros and total calories varies by day of the week.\n\ncalories_total: Simulate total daily calorie intake. For this we assume a normal distribution with mean of 3,000 calories and a standard deviation of 250.\n\nprop_carbs: For each day, what is the proportion of total calories made up from carbohydrates. As this is a proportion, for each day we generate a random number between 0.45 and 0.65.\n\nprop_protein: For each day, what is the proportion of total calories made up from protein? For each day we generate a random number between 0.15 and 0.20.\n\nprop_fat: For each day, what is the proportion of total calories made up from fat? As the proportions for each macro-nutrient need to sum to 1, fat is just 1 minus prop_carbs and prop_protein.\n\n\n# simulate the data\nset.seed(123)\n\ndata &lt;- tibble(\n  date = lubridate::ymd(paste(\"2023-04-\", 1:30, sep = \"\")), \n  day = lubridate::wday(date, label = TRUE), \n  calories_total = rnorm(n = 30, mean = 3000, sd = 250), \n  prop_carbs = runif(n = 30, min = 0.45, max = 0.65), \n  prop_protein = runif(n = 30, min = 0.15, max = 0.20), \n  prop_fat = 1 - (prop_carbs + prop_protein)\n  )\ndata\n\n# A tibble: 30 × 6\n   date       day   calories_total prop_carbs prop_protein prop_fat\n   &lt;date&gt;     &lt;ord&gt;          &lt;dbl&gt;      &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1 2023-04-01 Sat            2860.      0.583        0.157    0.260\n 2 2023-04-02 Sun            2942.      0.469        0.183    0.348\n 3 2023-04-03 Mon            3390.      0.527        0.167    0.306\n 4 2023-04-04 Tue            3018.      0.505        0.183    0.312\n 5 2023-04-05 Wed            3032.      0.613        0.166    0.221\n 6 2023-04-06 Thu            3429.      0.540        0.159    0.301\n 7 2023-04-07 Fri            3115.      0.612        0.189    0.199\n 8 2023-04-08 Sat            2684.      0.612        0.155    0.233\n 9 2023-04-09 Sun            2828.      0.609        0.173    0.218\n10 2023-04-10 Mon            2889.      0.538        0.176    0.286\n# … with 20 more rows\n\n\nWe can then use these proportions for each macro to calculate how many of the day’s total calories were from carbohydrates, protein, and fats. Once we have this we can remove the proportion columns.\n\ndata &lt;- data %&gt;% \n  mutate(calories_carbs = calories_total * prop_carbs, \n         calories_protein = calories_total * prop_protein, \n         calories_fat = calories_total * prop_fat) %&gt;% \n  select(-starts_with(\"prop_\"))\ndata \n\n# A tibble: 30 × 6\n   date       day   calories_total calories_carbs calories_protein calories_fat\n   &lt;date&gt;     &lt;ord&gt;          &lt;dbl&gt;          &lt;dbl&gt;            &lt;dbl&gt;        &lt;dbl&gt;\n 1 2023-04-01 Sat            2860.          1667.             448.         745.\n 2 2023-04-02 Sun            2942.          1380.             537.        1025.\n 3 2023-04-03 Mon            3390.          1786.             567.        1037.\n 4 2023-04-04 Tue            3018.          1524.             552.         942.\n 5 2023-04-05 Wed            3032.          1859.             503.         670.\n 6 2023-04-06 Thu            3429.          1851.             546.        1032.\n 7 2023-04-07 Fri            3115.          1907.             589.         620.\n 8 2023-04-08 Sat            2684.          1644.             415.         625.\n 9 2023-04-09 Sun            2828.          1722.             490.         616.\n10 2023-04-10 Mon            2889.          1554.             507.         827.\n# … with 20 more rows\n\n\nIn order for us to do visualisations we need to change the calorie data into long format.\n\ndata &lt;- data %&gt;% \n  pivot_longer(calories_total:calories_fat, \n               names_to = \"source\") %&gt;% \n  mutate(source = str_remove(source,\"calories_\"))\ndata\n\n# A tibble: 120 × 4\n   date       day   source  value\n   &lt;date&gt;     &lt;ord&gt; &lt;chr&gt;   &lt;dbl&gt;\n 1 2023-04-01 Sat   total   2860.\n 2 2023-04-01 Sat   carbs   1667.\n 3 2023-04-01 Sat   protein  448.\n 4 2023-04-01 Sat   fat      745.\n 5 2023-04-02 Sun   total   2942.\n 6 2023-04-02 Sun   carbs   1380.\n 7 2023-04-02 Sun   protein  537.\n 8 2023-04-02 Sun   fat     1025.\n 9 2023-04-03 Mon   total   3390.\n10 2023-04-03 Mon   carbs   1786.\n# … with 110 more rows"
  },
  {
    "objectID": "chapters/01-part-to-whole.html#visualisations",
    "href": "chapters/01-part-to-whole.html#visualisations",
    "title": "\n1  Part-to-whole\n",
    "section": "\n1.3 Visualisations",
    "text": "1.3 Visualisations"
  },
  {
    "objectID": "chapters/01-part-to-whole.html#different-visualisations",
    "href": "chapters/01-part-to-whole.html#different-visualisations",
    "title": "\n1  Part-to-whole\n",
    "section": "\n1.3 Different Visualisations",
    "text": "1.3 Different Visualisations\n\n1.3.1 Bar plot\nAhh the good old humble bar plot. Not really useful for a part-to-whole visualisation (ha! Suddenly I’m a know-it-all on part-to-whole visualisations), but here it is anyway:\n\nbar &lt;- data %&gt;% \n  filter(source != \"total\") %&gt;% \n  ggplot(aes(x = date, y = value, group = source)) + \n  geom_col(aes(fill = source), \n           position = \"dodge\") + \n  labs(x = NULL, \n       y =\"Calories Consumed\", \n       fill = NULL)\nbar\n\n\n\n\nNot bad, but it’s hard to differentiate the different days during the month.\n\n1.3.2 Stacked column plot\nA stacked column plot is similar to the bar plot but the bars are—you guessed it—stacked on top of each other:\n\nstacked_column &lt;- data %&gt;% \n  filter(source != \"total\") %&gt;% \n  ggplot(aes(x = date, y = value)) + \n  geom_col(aes(fill = source)) + \n  labs(x = NULL, \n       y =\"Calories Consumed\", \n       fill = NULL)\nstacked_column\n\n\n\n\nThis is clearly better than the bar plot. One useful aspect of this plot is that we get multiple points of information: The height of each column shows the total calories consumed (the whole), and the colours represent the macros that make up that total (the part). It’s very basic, but it’s functional.\n\n1.3.3 Polar plot\nI am not sure if this is the correct term for it, but you can wrap the column plot around polar coordinates using coord_polar() in ggplot. This makes it look snazzier, but I am not sure it is more informative.\n\npolar &lt;- data %&gt;% \n  filter(source != \"total\") %&gt;% \n  ggplot(aes(x = date, y = value)) + \n  geom_col(aes(fill = source)) + \n  coord_polar() +\n  labs(x = NULL, \n       y =\"Calories Consumed\", \n       fill = NULL)\npolar\n\n\n\n\nIt’s definitely snazzier, and you still retain a feel for the total calories consumed each day. It is harder to ready the y-axis (calories consumed) for each point, and whilst we’re at it the x-axis (date) isn’t that clear either.\nWe also get an idea of the macro contributions to the total, but in the current plot this isn’t completely satisfactory because it’s hard to visualise the category with the smallest proportion (protein). To address this we can reverse the ordering on the geom_col() call using the position argument so that the category with the smallest contribution is on the outer section of each column.\n\npolar_reversed &lt;- data %&gt;% \n  filter(source != \"total\") %&gt;% \n  ggplot(aes(x = date, y = value)) + \n  geom_col(aes(fill = source), \n           position = position_stack(reverse = TRUE)) + \n  coord_polar() +\n  labs(x = NULL, \n       y =\"Calories Consumed\", \n       fill = NULL)\npolar_reversed\n\n\n\n\nHere they are all next to each other:\n\nlibrary(patchwork)\n(bar + stacked_column) / (polar + polar_reversed)"
  },
  {
    "objectID": "chapters/01-part-to-whole.html#grouping-by-day",
    "href": "chapters/01-part-to-whole.html#grouping-by-day",
    "title": "\n1  Part-to-whole\n",
    "section": "\n1.4 Grouping by day",
    "text": "1.4 Grouping by day\nMaybe you want to log how your macros vary on average by day. To do this, we group our data by the day of the week and calculate averages for each day and plot these. We need to briefly go back to wide data to calculate the relevant averages\n\nday_data &lt;- data %&gt;% \n  pivot_wider(names_from = source, values_from = value) %&gt;% \n  group_by(day) %&gt;% \n  summarise(carbs = mean(carbs), \n            protein = mean(protein), \n            fat = mean(fat)) %&gt;% \n  pivot_longer(carbs:fat, names_to = \"source\")\nday_data\n\n# A tibble: 21 × 3\n   day   source  value\n   &lt;ord&gt; &lt;chr&gt;   &lt;dbl&gt;\n 1 Sun   carbs   1575.\n 2 Sun   protein  536.\n 3 Sun   fat      943.\n 4 Mon   carbs   1674.\n 5 Mon   protein  560.\n 6 Mon   fat      821.\n 7 Tue   carbs   1571.\n 8 Tue   protein  532.\n 9 Tue   fat      816.\n10 Wed   carbs   1669.\n# … with 11 more rows\n\n\n\nday_data %&gt;% \n  ggplot(aes(x = day, y = value)) + \n  geom_col(aes(fill = source), \n           position = position_stack(reverse = TRUE)) + \n  coord_polar() +\n  labs(x = NULL, \n       y =\"Calories Consumed\", \n       fill = NULL)"
  },
  {
    "objectID": "chapters/01-part-to-whole.html#grouping-by-month-and-day",
    "href": "chapters/01-part-to-whole.html#grouping-by-month-and-day",
    "title": "\n1  Part-to-whole\n",
    "section": "\n1.5 Grouping by month and day",
    "text": "1.5 Grouping by month and day\nSo you’re really keen and you’ve logged your calorie intake daily throughout all of 2023. Let’s calculaute the average for each day of the week, and see how these totals change across the months of the year.\nFirst let’s simulate some data for the entire year. This is similar to earlier, but we first need to create a date column that spans the whole year.\n\n# create a data frame with all the days of the year\nyear_data &lt;- tibble(year = 2023) %&gt;% \n  mutate(date = list(seq(lubridate::ymd(paste0(year, \"-01-01\")), \n                         lubridate::ymd(paste0(year, \"-12-31\")), \n                         by = \"day\"))) %&gt;% \n  unnest(date) %&gt;% \n  select(-year) \n\n# simulate calorie data\nset.seed(234)\nyear_data &lt;- year_data %&gt;% \n  mutate(day = lubridate::wday(date, label = TRUE), \n         month = lubridate::month(date, label = TRUE), \n         calories_total = rnorm(n = 365, mean = 3000, sd = 250), \n         prop_carbs = runif(n = 365, min = 0.45, max = 0.65), \n         prop_protein = runif(n = 365, min = 0.15, max = 0.20), \n         prop_fat = 1 - (prop_carbs + prop_protein)) %&gt;% \n  mutate(calories_carbs = calories_total * prop_carbs, \n         calories_protein = calories_total * prop_protein, \n         calories_fat = calories_total * prop_fat) %&gt;% \n  select(-starts_with(\"prop_\")) %&gt;% \n  pivot_longer(calories_total:calories_fat, \n               names_to = \"source\") %&gt;% \n  mutate(source = str_remove(source,\"calories_\"))\n\nNow we have this let’s follow previous steps and view a stacked column plot, faceting by month.\n\nyear_data %&gt;% \n  filter(source != \"total\") %&gt;% \n  group_by(day, month, source) %&gt;% \n  summarise(mean_value = mean(value)) %&gt;% \n  ungroup() %&gt;% \n  ggplot(aes(x = day, y = mean_value)) + \n  geom_col(aes(fill = source), \n           position = position_stack(reverse = TRUE)) + \n  labs(x = NULL, \n       y =\"Calories Consumed\", \n       fill = NULL) + \n  facet_wrap(~month)\n\n\n\n\nA slight tweak is needed to the x-axis labels to make them more readable:\n\nyear_data %&gt;% \n  filter(source != \"total\") %&gt;% \n  group_by(day, month, source) %&gt;% \n  summarise(mean_value = mean(value)) %&gt;% \n  ungroup() %&gt;% \n  ggplot(aes(x = day, y = mean_value)) + \n  geom_col(aes(fill = source), \n           position = position_stack(reverse = TRUE)) + \n  labs(x = NULL, \n       y =\"Calories Consumed\", \n       fill = NULL) + \n  theme(axis.text.x = element_text(angle = 90)) +\n  facet_wrap(~month)\n\n\n\n\nAnd the polar plot equivalent:\n\nyear_data %&gt;% \n  filter(source != \"total\") %&gt;% \n  group_by(day, month, source) %&gt;% \n  summarise(mean_value = mean(value)) %&gt;% \n  ungroup() %&gt;% \n  ggplot(aes(x = day, y = mean_value)) + \n  geom_col(aes(fill = source), \n           position = position_stack(reverse = TRUE)) + \n  coord_polar() +\n  labs(x = NULL, \n       y =\"Calories Consumed\", \n       fill = NULL) + \n  facet_wrap(~month)"
  },
  {
    "objectID": "chapters/02-waffle.html",
    "href": "chapters/02-waffle.html",
    "title": "\n2  Waffle\n",
    "section": "",
    "text": "library(tidyverse)\n\nI blame Richard Mcelreath for introducing me to Waffle House. I’ve never met him and I’ve never been to Waffle House, but every time I hear “waffle” I think of his brilliant lecture that featured waffle houses being potentially blamed for high divorce rates in the USA (States with high divorce rate also have higher numbers of Waffle Houses. Of course, the link is not causal…)\nSo when today’s plotting theme was “waffle”, I had to do something with Waffle Houses. A basic idea was to construct a waffle plot showing the frequency of Waffle House locations in the USA. I tried lots of places to get at the location data for Waffle Houses, and any attempt to find a database of locations I could download was met with a rather ridiculous fee (minimum of $60!). In the end I found some fractional data from this Huffington Post post. So, we will go with this.\n\nIt only provdes the data from the top 21 locations, so this is what we will use. Let’s get it into R:\n\nwaffle_raw_data &lt;- tibble(\n  location = c(\"Atlanta\", \"Cartesville\", \"Greenville\", \"Athens\", \"Fort Worth\", \n               \"Nashville\", \"Griffin\", \"Commerce\", \"Mobile\", \"Louisville\", \n               \"Dallas\", \"Macon\", \"Bay Minette\", \"Charlotte\", \"Aiken\", \"Jackson\", \n               \"Raleigh\", \"Little Rock\", \"Gulfport\", \"Biloxi\", \"Pensacola\"), \n  number = c(132, 45, 34, 29, 25, 24, 23, 20, 20, 18, 18, \n             18, 18, 17, 17, 17, 16, 16, 16, 16, 16)\n) %&gt;% \n  mutate(location = as_factor(location))\nwaffle_raw_data\n\n# A tibble: 21 × 2\n   location    number\n   &lt;fct&gt;        &lt;dbl&gt;\n 1 Atlanta        132\n 2 Cartesville     45\n 3 Greenville      34\n 4 Athens          29\n 5 Fort Worth      25\n 6 Nashville       24\n 7 Griffin         23\n 8 Commerce        20\n 9 Mobile          20\n10 Louisville      18\n# ℹ 11 more rows\n\n\nTo do a waffle plot, we need a tibble where each location is repeated n times, where n comes from the number column. We can do this using the uncount() function in the tidyr package (comes installed with the tidyverse):\n\nwaffle_data &lt;- waffle_raw_data %&gt;%\n  uncount(weights = number, .remove = FALSE) \nwaffle_data\n\n# A tibble: 555 × 2\n   location number\n   &lt;fct&gt;     &lt;dbl&gt;\n 1 Atlanta     132\n 2 Atlanta     132\n 3 Atlanta     132\n 4 Atlanta     132\n 5 Atlanta     132\n 6 Atlanta     132\n 7 Atlanta     132\n 8 Atlanta     132\n 9 Atlanta     132\n10 Atlanta     132\n# ℹ 545 more rows\n\n\nOnce we have this, we can use the ggwaffle package (link here). It uses the wonderfully titled waffle_iron() function to get the data into the right shape for the waffle plot. Or, to put it in the words of the package help file:\n\nPour your data into a waffle iron to get ready to cook a waffle chart.\n\nLovely stuff.\n\n# devtools::install_github(\"liamgilbey/ggwaffle\")\nlibrary(ggwaffle)\n\nwaffle_plot_data &lt;- waffle_data %&gt;% \n  waffle_iron(aes_d(group = location)) %&gt;% \n  as_tibble()\nwaffle_plot_data\n\n# A tibble: 555 × 3\n       y     x group  \n   &lt;int&gt; &lt;int&gt; &lt;fct&gt;  \n 1     1     1 Atlanta\n 2     2     1 Atlanta\n 3     3     1 Atlanta\n 4     4     1 Atlanta\n 5     5     1 Atlanta\n 6     6     1 Atlanta\n 7     7     1 Atlanta\n 8     8     1 Atlanta\n 9     1     2 Atlanta\n10     2     2 Atlanta\n# ℹ 545 more rows\n\n\nThis has added the appropriate x- and y-coordinates for each “data point” that will serve as a hole in our waffle plot. We can now pass this data to ggplot2 with a standard ggplot call establishing the x- and y-axes, but then adding a call to geom_waffle() from the ggwaffle package:\n\nwaffle_plot_data %&gt;% \n  ggplot(aes(x = x, y = y, fill = group)) + \n  geom_waffle()\n\n\nA decent start, but the data points don’t look great as they are stretched; ideally they should be symetrical. You can do this by adding coord_equal() to the ggplot calls.\n\nwaffle_plot_data %&gt;%\n  ggplot(aes(x = x, y = y, fill = group)) + \n  geom_waffle() +\n  coord_equal()\n\n\nOK, but now the plot is way too small. I spent absolutely ages trying to work out how to remove all of the white space from around the plot. One solution I was looking for was manually changing the number of rows and columns in the waffle plot. In the end—and don’t ask me why it took me so long to check here—I found the following issue in the GitHub repository for the ggwaffle package, which suggested that I needed to look at the waffle_iron() function rather than the geom_waffle() call. As it turns out, I just add rows = 20 to the waffle_iron() call and then pass this new data to the plotting functions\n\nwaffle_raw_data %&gt;%\n  uncount(weights = number, .remove = FALSE) %&gt;% \n  waffle_iron(aes_d(group = location), \n              rows = 20) %&gt;% \n  ggplot(aes(x = x, y = y, fill = group)) + \n  geom_waffle() +\n  coord_equal()\n\nWarning: Using the `size` aesthetic in this geom was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` in the `default_aes` field and elsewhere instead.\n\n\n\n\n\nOK, finally we’re getting somewhere! Let’s tidy this up a bit by removing the x- and y-axes and their labels:\n\nwaffle_raw_data %&gt;%\n  uncount(weights = number, .remove = FALSE) %&gt;% \n  waffle_iron(aes_d(group = location), \n              rows = 20) %&gt;% \n  ggplot(aes(x = x, y = y, fill = group)) + \n  geom_waffle() +\n  coord_equal() + \n  theme_void() + \n  labs(fill = NULL) \n\n\n\n\nYou can change the squares to circles on a waffle plot by using geom_waflle(tile_shape = \"circle\"), but need to change the colouring to colour rather than fill in the ggplot aes() call:\n\nwaffle_raw_data %&gt;%\n  uncount(weights = number, .remove = FALSE) %&gt;% \n  waffle_iron(aes_d(group = location), \n              rows = 20) %&gt;% \n  ggplot(aes(x = x, y = y, colour = group)) + \n  geom_waffle(tile_shape = \"circle\", size = 4) +\n  coord_equal() + \n  theme_void() + \n  labs(colour = NULL) \n\n\n\n\nLet’s just add a title and we’re probably done. Initial attempts showed the title was too small and left-aligned too extremely. So I had to invoke a series of theme(plot.) function calls to get it right\n\nwaffle_raw_data %&gt;%\n  uncount(weights = number, .remove = FALSE) %&gt;% \n  waffle_iron(aes_d(group = location), \n              rows = 20) %&gt;% \n  ggplot(aes(x = x, y = y, colour = group)) + \n  geom_waffle(tile_shape = \"circle\", size = 4) +\n  coord_equal() + \n  theme_void() + \n  labs(colour = NULL, \n       title = \"Top Waffle House Locations in the USA\") +\n  theme(plot.title = element_text(hjust = 0.5, \n                                  size = 16, \n                                  face = \"bold\"))"
  }
]